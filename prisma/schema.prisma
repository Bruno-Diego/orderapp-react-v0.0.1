generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()"))
  clerkUserId   String    @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  imageUrl      String?
  address       String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  createdAt DateTime  @default(now())
  title     String
  desc      String
  color     String
  img       String?
  slug      String    @unique
  products  Product[]
}

model Product {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  createdAt  DateTime @default(now())
  title      String
  desc       String
  img        String?
  price      Decimal
  isFeatured Boolean  @default(false)
  options    Json[]
  catSlug    String
  category   Category @relation(fields: [catSlug], references: [slug])
}

model Order {
  orderId       String   @id @unique @default(dbgenerated("gen_random_uuid()"))
  userId        String
  createdAt     DateTime @default(now())
  price         Decimal
  products      Json[]
  status        String
  intent_id     String?  @unique
  userEmail     String
  userAddress   String?
  messageToChef String?
  user          User     @relation(fields: [userId], references: [clerkUserId], onDelete: NoAction)
}
